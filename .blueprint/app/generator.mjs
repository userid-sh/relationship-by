export async function createGenerator(env) {
  const BaseAppGenerator = await env.requireGenerator('jhipster:app');

  return class extends BaseAppGenerator {
constructor(args, opts, features) {
  super(args, opts, {
    ...features,
    fromBlueprint: true,
  });

  this.sbsBlueprint = true;

  // üîß –ü–∞—Ç—á–∏—Ä—É–µ–º this.log, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –∏ —Ñ—É–Ω–∫—Ü–∏–µ–π, –∏ –æ–±—ä–µ–∫—Ç–æ–º
  const fallback = msg => console.log(msg);
  const logFunc = (...args) => console.log(...args);

  Object.assign(logFunc, {
    info: console.log,
    warn: console.warn,
    error: console.error,
    debug: console.debug,
    write: fallback,
    writeln: fallback,
    ok: fallback,
  });

  this.log = logFunc;


}

    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É task group
    get [BaseAppGenerator.INITIALIZING]() {
      return this.asInitializingTaskGroup({
        helloTask() {
          this.log.info('üëã Hello from jhipster-relationship app generator!');
        },
      });
    }
  };
}
